# %% Load the filtered signals from Vivado and comparation 
# ----------------------------------------------------------

import numpy as np
import scipy.signal as signal
import matplotlib.pyplot as plt

# Function to convert hex to signed integer
def hex_to_signed(val, bits=16):
    if val >= 2**(bits - 1):
        val -= 2**bits
    return val

# Bits length for the input signal
nb_tabla = 14

# Read the files generated by Vivado and Simulink
File_R_Ver = f'../ComparativaCIC.sim/sim_1/behav/xsim/real_ver_n{nb_tabla}.txt'
File_R_Sim = f'../ComparativaCIC.sim/sim_1/behav/xsim/real_sim_n{nb_tabla}.txt'
File_I_Ver = f'../ComparativaCIC.sim/sim_1/behav/xsim/imag_ver_n{nb_tabla}.txt'
File_I_Sim = f'../ComparativaCIC.sim/sim_1/behav/xsim/imag_sim_n{nb_tabla}.txt'

with open(File_R_Ver, 'r') as f:
    hex_real_v = f.readlines()

with open(File_R_Sim, 'r') as f:
    hex_real_s = f.readlines()

with open(File_I_Ver, 'r') as f:
    hex_imag_v = f.readlines()

with open(File_I_Sim, 'r') as f:
    hex_imag_s = f.readlines()

# Convert to signed integers, ignoring invalid lines
int_real_s = []
int_real_v = []
int_imag_s = []
int_imag_v = []

for line in hex_real_s:
    line = line.strip()
    try:
        # Attempt to convert to integer (base 16)
        int_real_s.append(hex_to_signed(int(line, 16)))
    except ValueError:
        print(f"Skipping invalid hex value: {line}")

for line in hex_real_v:
    line = line.strip()
    try:
        # Attempt to convert to integer (base 16)
        int_real_v.append(hex_to_signed(int(line, 16)))
    except ValueError:
        print(f"Skipping invalid hex value: {line}")

for line in hex_imag_s:
    line = line.strip()
    try:
        # Attempt to convert to integer (base 16)
        int_imag_s.append(hex_to_signed(int(line, 16)))
    except ValueError:
        print(f"Skipping invalid hex value: {line}")

for line in hex_imag_v:
    line = line.strip()
    try:
        # Attempt to convert to integer (base 16)
        int_imag_v.append(hex_to_signed(int(line, 16)))
    except ValueError:
        print(f"Skipping invalid hex value: {line}")

# %% Time Plots
# -----------------

# Amplitude and delay adjustment
factor_escala = 0.78 
int_real_s_amp = [x * factor_escala for x in int_real_s]
int_imag_s_amp = [x * factor_escala for x in int_imag_s]

delay = 72
int_real_s_amp_d = int_real_s_amp[delay:len(int_real_s_amp)]  
int_imag_s_amp_d = int_imag_s_amp[delay:len(int_imag_s_amp)]  

# Plot for the first 2000 samples, real part
plt.figure()
plt.plot(int_real_s_amp_d[:2000], label='Simulink', color='red')
plt.plot(int_real_v[:2000], label='Verilog', color='blue')
plt.title('Comparation of Filtered Signals - Real Part')
plt.xlabel('Time')
plt.ylabel('Amplitude')
plt.legend()
plt.grid(True)
plt.show()


# Plot for the first 2000 samples, imaginary part
plt.figure()
plt.plot(int_imag_s_amp_d[:2000], label='Simulink', color='red')
plt.plot(int_imag_v[:2000], label='Verilog', color='blue')
plt.title('Comparation of Filtered Signals - Imaginary Part')
plt.xlabel('Time')
plt.ylabel('Amplitude')
plt.legend()
plt.grid(True)
plt.show()


# %% Frequency Plots
# -------------------

import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import welch

# Parámetros
Fsampling1 = 10
Fx = Fsampling1/10
LimY11 = -20
LimY12 = 100
scale = 1.28  

# Señales complejas
Y0 = (np.array(int_real_v) + 1j * np.array(int_imag_v)) * scale
Y1 = np.array(int_real_s) + 1j * np.array(int_imag_s)

# Welch para Y0 y Y1
segmentLength = round(len(Y0) / 10)
noverlap = round(segmentLength * 0.5)

f0, pY0 = welch(Y0[segmentLength:], fs=Fsampling1, nperseg=segmentLength, noverlap=noverlap,
                return_onesided=False, scaling='density', average='mean')
f1, pY1 = welch(Y1[segmentLength:], fs=Fsampling1, nperseg=segmentLength, noverlap=noverlap,
                return_onesided=False, scaling='density', average='mean')

# Gráfico
plt.figure()
plt.plot(f0, 10 * np.log10(pY0), label='Verilog filter', linewidth=2)
plt.plot(f1, 10 * np.log10(pY1), label='Simulink filter', linewidth=2)

plt.xlim([-Fx / 2, Fx / 2])
plt.ylim([LimY11, LimY12])
plt.grid(True)
plt.legend()
plt.title('Densidad espectral de potencia (Welch)')
plt.xlabel('Frecuencia (Hz)')
plt.ylabel('Potencia (dB)')
plt.show()

# %%
